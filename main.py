
from telebot import *
from config import *
from data_manager import *
from mark_up_manager import *

bot = telebot.TeleBot(BOT_TOKEN, parse_mode=None)


@bot.message_handler(commands=['start', 'help'])
def send_walcome(message):
    bot.reply_to(message, f"–ü—Ä–∏–≤—ñ—Ç‚úåÔ∏è! {message.from_user.first_name}, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ @yish_sobi_bot —ñ —è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ø—Ä–∏–¥–±–∞—Ç–∏ –º'—è—Å–∫–æ")
    bot.send_message(message.chat.id, '–û–±–µ—Ä–∏ –≤ –º–µ–Ω—é –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é', reply_markup=main_board)

#main text handler. Ir handle most of reply markup buttons
@bot.message_handler(content_types='text')
def main_handler(message):
    if message.text == order_btn:
        msg = bot.send_message(message.chat.id, "–°—É–ø–µ—Ä!üëç –û–±–µ—Ä–∏ —Å–º–∞–∫, —è–∫–∏–π —Ç–æ–±—ñ –¥–æ–≤–ø–æ–¥–æ–±–∏.", reply_markup=products_board)
        bot.register_next_step_handler(msg, choice_product)
    elif message.text == send_wish_btn:
        msg = bot.send_message(message.chat.id, "–ú–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º –≤—Å–µ, —â–æ –∑–∞–±–∞–∂–∞—î—à –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º. –ú–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞—î–º–æ!")
        bot.register_next_step_handler(msg, send_wish)
    elif message.text == contacts_btn:
        bot.send_message(message.chat.id, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –á–ñ–°–û–ë–Ü\n –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π email \n —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∫–æ–º—É –º–æ–∂–Ωa –Ω–∞—Ä–ø–∏—Å–∞—Ç–∏", reply_markup=back_board)
    elif message.text == info_btn:
        bot.send_message(message.chat.id, "–Ø–∫–∞ —Å–∞–º–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=info_board)
    elif message.text == back_btn:
        bot.send_message(message.chat.id, '–û–±–µ—Ä–∏ –≤ –º–µ–Ω—é –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é', reply_markup=main_board)
    elif message.text == info_meat_btn:
        bot.send_message(message.chat.id, product_info_text, reply_markup=subinfo_board)
    elif message.text == info_deal_btn:
        bot.send_message(message.chat.id, maker_info_text, reply_markup=subinfo_board)
    elif message.text == info_maker_btn:
        bot.send_message(message.chat.id, "–Ü–º'—è –≤–∏—Ä–æ–±–Ω–∏–∫–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤—ñ–¥–æ–º–µ, —â–æ–± –π–æ–≥–æ –∫–∞–∑–∞—Ç–∏. –°–∫–∞–∂—É –ª–∏—à–µ –æ–¥–Ω–µ, –≤—ñ–Ω —á–µ–º–ø—ñ–æ–Ω –∫–∞–≤—É–Ω–∞ —ñ –¥–≤—ñ—á—ñ —É—á–∞—Å–Ω–∏–∫ –≥–∞–ª–∞ –∫–æ–Ω—Ü—Ü–µ—Ä—Ç—É –õ—ñ–≥–∞ –°–º—ñ—Ö—É", reply_markup=subinfo_board)
    elif message.text == cart_remove_btn:
        msg = bot.send_message(message.chat.id, "–û–±–µ—Ä–∏, —â–æ–± —Ç–∏ —Ö–æ—Ç—ñ–≤ –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ–∑ –∫–æ—à–∏–∫–∞", reply_markup=cart_remove_board)
        bot.register_next_step_handler(msg, remove_from_cart_handler)
    elif message.text == cart_btn:
        bot.send_message(message.chat.id, "–î–∏–≤–∏–º–æ—Å—å, —â–æ —Ç–∏ –¥–æ–¥–∞–≤ —É –∫–æ—à–∏–∫", reply_markup=sub_product_board)
        show_cart_handler(message)
    elif message.text == deal_btn:
        if check_cart_exist(user_id=message.from_user.id):
            msg = bot.send_message(message.chat.id, "–î–æ–±—Ä–µ, –¥–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º—è –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ", reply_markup=clear_board)
            bot.register_next_step_handler(msg, register_name)
        else:
            bot.send_message(message.chat.id, f"–ù–∞–∂–∞–ª—å –≤–∞—à –∫–æ—à–∏–∫ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π, —â–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ {order_btn}", reply_markup=main_board)
    elif message.text == done_btn:
        delete_cart(user_id=message.from_user.id)
        bot.send_message(message.chat.id, "–î—è–∫—É—é, —â–æ –æ–±—Ä–∞–ª–∏ –á–∂–°–æ–±—ñ. –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —â–µüñê.", reply_markup=main_board)

    elif message.text == 'send full info':
        print(message)

def choice_product(message):
    global id
    if message.text == standart_tasty_btn:
        id = 1
    elif message.text == chernosliv_tasty_btn:
        id = 2
    elif message.text == ginger_tasty_btn:
        id = 3
    elif message.text == cart_btn:
        id = 0
        show_cart_handler(message)
    else:
        id = 0
        bot.send_message(message.chat.id, "–û–π –ª–∏—à–µ–Ω—å–∫–æ, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞ —Å–∞–º–æ–≥–æ –ø–æ—á–∞—Ç–∫—É", reply_markup=main_board)
    if id > 0:
        send_product_info_handler(message, id)

#send pic and all info about product, ask pick a weight
def send_product_info_handler(message, id):
    product_info = get_product_info(id=id)
    name = product_info[0]
    price = product_info[1]
    description = product_info[2]
    print(name, price, description)
    caption = f"–ú'—è—Å–∫–æ {name}\n----------------\n –¶—ñ–Ω–∞ - {price} –≥—Ä–Ω\n –æ–ø–∏—Å: {description}"
    file_url = f"media/id{id}.jpg"
    try:
        bot.send_photo(message.chat.id, open(file_url, 'rb'), caption=caption, reply_markup=weight_choice_inline)
        bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–≥—É ( —É –≥—Ä–∞–º–∞—Ö ) ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è", reply_markup=sub_product_board)
    except Exception as e:
        print(e)

@bot.callback_query_handler(func=lambda call:True)
def inline_handler(call):
    print(call.data)
    if call.data == btnown:
        msg = bot.send_message(call.message.chat.id,
                               "–ù–∞–ø–∏—à–∏ —Å–∫—ñ–ª—å–∫–∏ —Ç–∏ –± —Ö–æ—Ç—ñ–≤ –ø—Ä–∏–¥–±—Ä–∞—Ç–∏ –º'—è—Å–∫–∞ —É –≥—Ä–∞–º–∞—Ö (–∑–Ω–∞–∫–∞–º–∏ '0-9')", reply_markup=back_board)
        bot.register_next_step_handler(msg, own_weight_handler)
    elif call.data == name_yes_callback:
        msg = bot.send_message(call.message.chat.id, "–¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        bot.register_next_step_handler(msg, register_phone)
    elif call.data == name_no_callback:
        msg = bot.send_message(call.message.chat.id, "–û–∫, –Ω–∞–ø–∏—à–∏ –≤—ñ—Ä–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Å–≤–æ—ó—Ö –ü–Ü–ë")
        bot.register_next_step_handler(msg, register_name)
    elif call.data == phone_yes_callback:
        msg = bot.send_message(call.message.chat.id, post_info_reask_text)
        bot.register_next_step_handler(msg, register_post_info)
    elif call.data == phone_no_callback:
        msg = bot.send_message(call.message.chat.id, "–û–∫, –≤–∫–∞–∂–∏ –≤—ñ—Ä–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        bot.register_next_step_handler(msg, register_phone)
    elif call.data == post_info_yes_callback:
        bot.send_message(call.message.chat.id, "–î—è–∫—É—é, –û—Å—å —Ç–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        user_order_info = show_all_order_info(user_id=call.from_user.id)
        bot.send_message(call.message.chat.id, user_order_info,parse_mode='html')
        msg = bot.send_message(call.message.chat.id, "–Ø–∫—â–æ –≤—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ—Ä–Ω–∞, –º–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏", reply_markup=payment_board)
        bot.register_next_step_handler(msg, payment_handler)
    elif call.data == post_info_no_callback:
        msg = bot.send_message(call.message.chat.id, "–û–∫, –Ω–∞–¥–∞–π –≤—ñ—Ä–Ω—É  —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è")
        bot.register_next_step_handler(msg, register_post_info)
    else:
        weight = int(call.data)
        add_to_cart(id, weight, call.from_user.id)
        bot.send_message(call.message.chat.id, f"–§–∞–π–Ω–æ! {weight} –≥—Ä–∞–º –¥–æ–¥–∞–Ω–æ –≤ —Ç–≤—ñ–π –∫–æ—à–∏–∫. –ú–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ —â–µ —Å–º–∞–∫–∏.", reply_markup=sub_product_board)
        bot.send_message(call.message.chat.id, "–ú–æ–∂–µ—à –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∞–±–æ –æ–±—Ä–∞—Ç–∏ —Å–æ–±—ñ —â–µ –º'—è—Å–∫–∞ —ñ –¥–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫")

def own_weight_handler(message):
    print(f'id in own weught handler id - {id}')
    try:
        order_weight = int(message.text)
        add_to_cart(id, order_weight, message.from_user.id)
        bot.send_message(message.chat.id, f"–§–∞–π–Ω–æ! {order_weight} –≥—Ä–∞–º –¥–æ–¥–∞–Ω–æ –≤ —Ç–≤—ñ–π –∫–æ—à–∏–∫. –ú–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ —â–µ —Å–º–∞–∫–∏",
                         reply_markup=sub_product_board)
    except Exception as e:
        print(f'–ü–æ–º–∏–ª–∫–∞ —ñ–∑ –≤–≤–µ–¥–µ–Ω–Ω—è–º –≤–ª–∞—Å–Ω–æ—ó –≤–∞–≥–∏ {e}')
        msg_error = bot.send_message(message.chat.id, "–¢—é, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(msg_error, own_weight_handler)

def show_cart_handler(message):
    print('goi into show cart handler')
    user_cart = get_cart_info(user_id=message.from_user.id)
    if len(user_cart) == 0:
        bot.send_message(message.chat.id, "–¢–≤—ñ–π –∫–æ—à–∏–∫ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π. –û–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç —Ç–∞ –¥–æ–¥–∞–π —Å–æ–±—ñ –≤ –∫–æ—à–∏–∫", reply_markup=sub_product_board)
        bot.send_message(message.chat.id, f"–î–ª—è —Ç–æ–≥–æ —â–æ–± –¥–æ–¥–∞—Ç–∏ —Å–æ–±—ñ —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫ –ø–µ—Ä–µ–π–¥–∏ –≤ '{order_btn}'")

    else:
        print("–§–æ—Ä–º—É—é –∫–æ—Ä–∑–∏–Ω—É")
        cart_info = "<b>–ù–∞–∑–≤–∞ | –¶—ñ–Ω–∞ | –í–∞–≥–∞ | –í—Å—å–æ–≥–æ </b>\n"
        cart_total_price = 0
        for each_product_info in user_cart:
            product_name, price, weight, total_price = each_product_info[0], each_product_info[1], each_product_info[2], each_product_info[3]
            cart_info += f"{product_name} | {price} | {weight} | {total_price}\n"
            cart_total_price += total_price
        cart_info += f"<b>–°–£–ú–ê –î–û –°–ü–õ–ê–¢–ò -------- {cart_total_price}</b>"
        print("Sending CART info to tg")
        bot.send_message(message.chat.id, cart_info, reply_markup = deal_board, parse_mode='html')

def remove_from_cart_handler(message):
    global remove_id
    if message.text == standart_tasty_btn:
        remove_id = 1
    elif message.text == chernosliv_tasty_btn:
        remove_id = 2
    elif message.text == ginger_tasty_btn:
        remove_id = 3
    elif message.text == remove_all_btn:
        remove_id = 777
    else:
        print("message dont readable in remove_from_cart_handler, no remove id")
        msg = bot.send_message(message.chat.id, "–û—Ç —Ö–∞–ª–µ–ø–∞, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π —Å–ø—Ä–æ–±—É—î–º–æ —â–µ", reply_markup=cart_remove_board)
        bot.register_next_step_handler(msg, show_cart_handler)
    if remove_id > 0:
        msg_text = remove_from_cart(id=remove_id, user_id=message.from_user.id)
        bot.send_message(message.chat.id, msg_text, reply_markup=cart_remove_board)
        show_cart_handler(message)

def register_name(message):
    global name
    name = message.text
    bot.send_message(message.chat.id, f"<b>{name}</b> –ß–∏ –≤—ñ—Ä–Ω–æ —è –∑–∞–ø–∏—Å–∞–≤ —Ç–≤–æ—ó –ü–Ü–ë? –ù–∞—Ç–∏—Å–Ω–∏ <b>'–¢–∞–∫'</b>, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –∞–±–æ <b>'–ù—ñ'</b>, —â–æ–± –≤–∏–ø—Ä–∞–≤–∏—Ç–∏\n ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è", reply_markup=ask_name_board, parse_mode='html')

def register_phone(message):
    global phone_number
    phone_number = message.text
    bot.send_message(message.chat.id,
                     f"<b>{phone_number}</b> –ß–∏ –≤—ñ—Ä–Ω–æ —è –∑–∞–ø–∏—Å–∞–≤ —Ç–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É? –ù–∞—Ç–∏—Å–Ω–∏ <b>'–¢–∞–∫'</b>, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –∞–±–æ <b>'–ù—ñ'</b>, —â–æ–± –≤–∏–ø—Ä–∞–≤–∏—Ç–∏\n ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
                     reply_markup=ask_phone_board, parse_mode='html')

def register_post_info(message):
    global post_info
    post_info = message.text
    bot.send_message(message.chat.id, f"<b>{post_info}</b> –ß–∏ –≤—ñ—Ä–Ω–æ —è –∑–∞–ø–∏—Å–∞–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é? –ù–∞—Ç–∏—Å–Ω–∏ <b>'–¢–∞–∫'</b>, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –∞–±–æ <b>'–ù—ñ'</b>, —â–æ–± –≤–∏–ø—Ä–∞–≤–∏—Ç–∏\n ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
                     reply_markup=ask_post_info_board, parse_mode='html')

#function that show user whole info about his order
def show_all_order_info(user_id):
    print(user_id)
    total_order_info = "<b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n <b>–ù–∞–∑–≤–∞ | –¶—ñ–Ω–∞ | –í–∞–≥–∞ | –í—Å—å–æ–≥–æ </b>\n"
    global order_number
    global cart_total_price
    cart_total_price= 0
    cart_info = get_cart_info(user_id)
    for each_product_info in cart_info:
        product_name, price, weight, total_price = each_product_info[0], each_product_info[1], each_product_info[2], each_product_info[3]
        print(product_name, price, weight, total_price)
        total_order_info += f"{product_name} | {price} | {weight} | {total_price}\n"
        cart_total_price += int(total_price)
    total_order_info += f"<b>–°–£–ú–ê –î–û –°–ü–õ–ê–¢–ò -------- {cart_total_price}</b>"
    total_order_info += f"\n<b>–ü–Ü–ë –ó–∞–º–æ–≤–Ω–∏–∫–∞:</b> {name}\n <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> {phone_number}\n <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:</b> {post_info}"
    order_number = make_order(user_id, total_order_info)
    total_order_info += f"\n<b>–ù–û–ú–ï–† –í–ê–®–û–ì–û –ó–ê–ú–û–í–õ–ï–ù–ù–Ø - {order_number} </b>"
    return total_order_info

#fuinction that ask user wich way he gonna pay?
def payment_handler(message):
    if message.text == prepay_btn:
        bot.send_message(message.chat.id,f"""—Ç—É—Ç –±—É–¥—É—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –∫–∞—Ä—Ç–∏, –∞ –º–æ–∂–µ —ñ qr. 
        –°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏ <b>{cart_total_price} –≥—Ä–Ω. </b>\n <b>–í–ê–ñ–õ–ò–í–û:–í–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É</b>\n 
        –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - <b>‚Ññ{order_number}</b>""", parse_mode='html',reply_markup=done_board)
    elif message.text == not_prepay_btn:
        bot.send_message(message.chat.id, f"""—Ç—É—Ç –±—É–¥—É—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –∫–∞—Ä—Ç–∏, –∞ –º–æ–∂–µ —ñ qr. 
                –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥–ø–ª–∞—Ç—É —É —Ä–æ–∑–º—ñ—Ä—ñ 60 –≥—Ä–Ω\n <b>–í–ê–ñ–õ–ò–í–û:–í–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É</b>\n 
                –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - <b>‚Ññ{order_number}</b>""", parse_mode='html', reply_markup=done_board)
    elif message.text == back_btn:
        main_handler(message=message)

#function that accept text as message and write it in data base
def send_wish(message):
    wish = str(message.text)
    user_id = message.from_user.id
    user_name = str(message.from_user.username)
    user_full_name = f"name {message.from_user.first_name} {message.from_user.last_name} \n username - {message.from_user.username}"
    insert_wish(user_id, user_name, wish)
    bot.send_message(admin_chat_id, f"–ù–∞–¥—ñ–π—à–ª–æ –Ω–æ–≤–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è –≤—ñ–¥: {user_full_name} —Ç–µ–∫—Å—Ç –ø–æ–±–∞–∂–∞–Ω–Ω—è: {wish}")
    bot.send_message(message.chat.id, '–î—è–∫—É—é! –¢–∏ –º—ñ–π –Ω–∞–∫—Ä–∞—â–∏–π –¥—Ä—É–≥ —Ç–µ–ø–µ—Ä!', reply_markup=back_board)

bot.infinity_polling()


